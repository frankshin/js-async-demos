{
  "name": "generator",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "build": "webpack --progress --config webpack.pro.js"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    // Babel 包含一个可自定义 regenerator runtime 和 core-js 的 polyfill .
    // 它会仿效一个完整的 ES2015+ 环境，并意图运行于一个应用中而不是一个库/工具。这个 polyfill 会在使用 babel-node 时自动加载。
    // 这意味着你可以使用新的内置对象比如 Promise 或者 WeakMap, 静态方法比如 Array.from 或者 Object.assign, 实例方法比如 Array.prototype.includes 和生成器函数（提供给你使用 regenerator 插件）。为了达到这一点， polyfill 添加到了全局范围，就像原生类型比如 String 一样。
    "babel-polyfill": "^6.26.0"
  },
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "@babel/preset-env": "^7.0.0-beta.55",
    "babel-preset-env": "^1.7.0", // 在没有任何配置选项的情况下，babel-preset-env 与 babel-preset-latest（或者babel-preset-es2015，babel-preset-es2016和babel-preset-es2017一起）的行为完全相同。
    "html-webpack-plugin": "^3.2.0",
    "webpack": "^4.16.4",
    "webpack-cli": "^3.1.0",
    "babel-core": "^6.26.3",
    "babel-loader": "^7.1.5"
  }
}

// webpack 3.x | babel-loader 8.x | babel 7.x
npm install babel-loader@8.0.0-beta.0 @babel/core @babel/preset-env webpack

// webpack 3.x babel-loader 7.x | babel 6.x
npm install babel-loader babel-core babel-preset-env webpack